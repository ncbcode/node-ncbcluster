// Generated by CoffeeScript 1.9.1
(function() {
  var EventEmitter, Master, cluster, death, os,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  cluster = require('cluster');

  death = require('death');

  EventEmitter = require('events');

  os = require('os');

  Master = (function(superClass) {
    extend(Master, superClass);

    function Master(qtyWorkers) {
      var that;
      this.qtyWorkers = qtyWorkers || os.cpus().length;
      this.workers = [];
      this.stopped = true;
      that = this;
      death(function(signal, err) {
        return that.stop(signal, err);
      });
    }

    Master.prototype.start = function() {
      var cpu, i, ref;
      this.stopped = false;
      for (cpu = i = 1, ref = this.qtyWorkers; 1 <= ref ? i <= ref : i >= ref; cpu = 1 <= ref ? ++i : --i) {
        this.spawn();
      }
      return this.emit('master:spawn', this);
    };

    Master.prototype.stop = function(signal, err) {
      var i, interval, len, that, worker, workers;
      if (signal == null) {
        signal = 'SIGINT';
      }
      if (err == null) {
        err = null;
      }
      this.stopped = true;
      this.emit('master:exit', this);
      workers = this.workers.splice();
      for (i = 0, len = workers.length; i < len; i++) {
        worker = workers[i];
        worker.kill();
      }
      that = this;
      return interval = setInterval(function() {
        if (that.workers.length === 0) {
          clearInterval(interval);
          return process.exit(0);
        }
      }, 100);
    };

    Master.prototype.spawn = function() {
      var that, worker;
      that = this;
      worker = cluster.fork();
      worker.on('exit', function() {
        that.emit('worker:exit', worker);
        if (that.stopped) {
          return that.remove(worker);
        } else {
          return that.respawn(worker);
        }
      });
      this.workers.push(worker);
      return this.emit('worker:spawn', worker);
    };

    Master.prototype.remove = function(worker) {
      var index;
      index = this.workers.indexOf(worker);
      if (index !== -1) {
        return this.workers.splice(index, 1);
      }
    };

    Master.prototype.respawn = function(worker) {
      this.remove(worker);
      return this.spawn();
    };

    return Master;

  })(EventEmitter);

  module.exports = Master;

}).call(this);
